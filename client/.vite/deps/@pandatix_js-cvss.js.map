{
  "version": 3,
  "sources": ["../../node_modules/@pandatix/js-cvss/dist/errors.js", "../../node_modules/@pandatix/js-cvss/dist/cvss20.js", "../../node_modules/@pandatix/js-cvss/dist/cvss30.js", "../../node_modules/@pandatix/js-cvss/dist/cvss31.js", "../../node_modules/@pandatix/js-cvss/dist/cvss40.js"],
  "sourcesContent": ["export class InvalidMetric extends Error {\n    constructor(version, metric) {\n        super('invalid CVSS v' + version + ' metric ' + metric);\n        this.version = version;\n        this.metric = metric;\n    }\n}\nexport class InvalidMetricValue extends Error {\n    constructor(version, metric, value) {\n        super('invalid CVSS v' + version + ' value ' + value + ' for metric ' + metric);\n        this.version = version;\n        this.metric = metric;\n        this.value = value;\n    }\n}\n", "import * as errors from './errors';\n// https://go.dev/play/p/FpbKl0gOmWy\nconst re = /^(AV:[LAN])\\/(AC:[LMH])\\/(Au:[MSN])\\/(C:[NPC])\\/(I:[NPC])\\/(A:[NPC])(?:\\/(E:(?:ND|U|POC|F|H))\\/(RL:(?:ND|OF|TF|W|U))\\/(RC:(?:ND|UC|UR|C)))?(?:\\/(CDP:(?:ND|N|L|LM|MH|H))\\/(TD:(?:ND|N|L|M|H))\\/(CR:(?:ND|L|M|H))\\/(IR:(?:ND|L|M|H))\\/(AR:(?:ND|L|M|H)))?$/g;\n/**\n * Implementation of the CVSS v2.0 specification (https://www.first.org/cvss/v2/guide).\n */\nexport class CVSS20 {\n    /**\n     * Construct a CVSS v2.0 object, and parse the vector if provided.\n     * If not, the Base metrics is set to the default values (score = 0).\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    constructor(vector = 'AV:L/AC:L/Au:M/C:N/I:N/A:N') {\n        this._metrics = {\n            // Set default values of non-mandatory metrics : Not Defined (ND)\n            // => Temporal\n            'E': 'ND', 'RL': 'ND', 'RC': 'ND',\n            // => Environmental\n            'CDP': 'ND', 'TD': 'ND', 'CR': 'ND', 'IR': 'ND', 'AR': 'ND',\n        };\n        this.parse(vector);\n    }\n    /**\n     * Parse the provided vector.\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    parse(vector) {\n        // Ensure input is valid according to the regular expression\n        let matches = vector.matchAll(re).next().value;\n        if (matches == undefined) {\n            throw new Error('invalid CVSS v2.0 vector');\n        }\n        // Skip complete match\n        matches.shift();\n        // Parse each metric group\n        for (let match of matches) {\n            if (match == undefined) {\n                continue;\n            }\n            const pts = match.split(':');\n            this._metrics[pts[0]] = pts[1];\n        }\n    }\n    /**\n     * Return the vector string representation of the CVSS v2.0 object.\n     *\n     * @return The vector string representation.\n     */\n    Vector() {\n        let vector = '';\n        const app = (metric) => { vector += '\\/' + metric + ':' + this._metrics[metric]; };\n        const def = (metric) => { this._metrics[metric] != 'ND'; };\n        ['AV', 'AC', 'Au', 'C', 'I', 'A'].forEach(app);\n        if (['E', 'RL', 'RC'].some(def)) {\n            ['E', 'RL', 'RC'].forEach(app);\n        }\n        if (['CDP', 'TD', 'CR', 'IR', 'AR'].some(def)) {\n            ['CDP', 'TD', 'CR', 'IR', 'AR'].forEach(app);\n        }\n        return vector.slice(1);\n    }\n    /**\n     * Get the metric value given its value (e.g. 'AV').\n     *\n     * @param metric The metric to get the value of.\n     * @return The corresponding metric value.\n     * @throws Metric does not exist.\n     */\n    Get(metric) {\n        const v = this._metrics[metric];\n        if (v == undefined) {\n            throw new errors.InvalidMetric('2.0', metric);\n        }\n        return v;\n    }\n    /**\n     * Set the metric value given its key and value (e.g. 'AV' and 'L').\n     *\n     * @param metric The metric to set the value of.\n     * @param value The corresponding metric value.\n     * @throws Metric does not exist or has an invalid value.\n     */\n    Set(metric, value) {\n        const values = metrics[metric];\n        if (values == undefined) {\n            throw new errors.InvalidMetric('2.0', metric);\n        }\n        if (!values.includes(value)) {\n            throw new errors.InvalidMetricValue('2.0', metric, value);\n        }\n        this._metrics[metric] = value;\n    }\n    /**\n     * Compute the CVSS v2.0 Impact score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 20.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Impact() {\n        const c = scores['CIA'][this._metrics['C']];\n        const i = scores['CIA'][this._metrics['I']];\n        const a = scores['CIA'][this._metrics['A']];\n        return 10.41 * (1 - (1 - c) * (1 - i) * (1 - a));\n    }\n    /**\n     * Compute the CVSS v2.0 Exploitability score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 20.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Exploitability() {\n        const av = scores['AV'][this._metrics['AV']];\n        const ac = scores['AC'][this._metrics['AC']];\n        const au = scores['Au'][this._metrics['Au']];\n        return 20 * av * ac * au;\n    }\n    /**\n     * Compute the CVSS v2.0 Base score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 20.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    BaseScore() {\n        const impact = this.Impact();\n        let fimpact = 0;\n        if (impact != 0) {\n            fimpact = 1.176;\n        }\n        const exploitability = this.Exploitability();\n        return CVSS20.roundTo1Decimal(((0.6 * impact) + (0.4 * exploitability) - 1.5) * fimpact);\n    }\n    /**\n     * Compute the CVSS v2.0 Temporal score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 20.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    TemporalScore() {\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        return CVSS20.roundTo1Decimal(this.BaseScore() * e * rl * rc);\n    }\n    /**\n     * Compute the CVSS v2.0 Environmental score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 20.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    EnvironmentalScore() {\n        const c = scores['CIA'][this._metrics['C']];\n        const i = scores['CIA'][this._metrics['I']];\n        const a = scores['CIA'][this._metrics['A']];\n        const cr = scores['CIAR'][this._metrics['CR']];\n        const ir = scores['CIAR'][this._metrics['IR']];\n        const ar = scores['CIAR'][this._metrics['AR']];\n        const adujstedImpact = Math.min(10, 10.41 * (1 - (1 - c * cr) * (1 - i * ir) * (1 - a * ar)));\n        let fimpacBase = 0;\n        if (adujstedImpact != 0) {\n            fimpacBase = 1.176;\n        }\n        const expltBase = this.Exploitability();\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        const recBase = CVSS20.roundTo1Decimal(((0.6 * adujstedImpact) + (0.4 * expltBase) - 1.5) * fimpacBase);\n        const adjustedTemporal = CVSS20.roundTo1Decimal(recBase * e * rl * rc);\n        const cdp = scores['CDP'][this._metrics['CDP']];\n        const td = scores['TD'][this._metrics['TD']];\n        return CVSS20.roundTo1Decimal((adjustedTemporal + (10 - adjustedTemporal) * cdp) * td);\n    }\n    static roundTo1Decimal(x) {\n        return Math.round(x * 10) / 10;\n    }\n}\nconst metrics = {\n    // Base\n    'AV': ['L', 'A', 'N'],\n    'AC': ['L', 'M', 'H'],\n    'Au': ['M', 'S', 'N'],\n    'C': ['N', 'P', 'C'],\n    'I': ['N', 'P', 'C'],\n    'A': ['N', 'P', 'C'],\n    // Temporal\n    'E': ['ND', 'U', 'POC', 'F', 'H'],\n    'RL': ['ND', 'OF', 'TF', 'W', 'U'],\n    'RC': ['ND', 'UC', 'UR', 'C'],\n    // Environmental\n    'CDP': ['ND', 'N', 'L', 'LM', 'MH', 'H'],\n    'TD': ['ND', 'N', 'L', 'M', 'H'],\n    'CR': ['ND', 'L', 'M', 'H'],\n    'IR': ['ND', 'L', 'M', 'H'],\n    'AR': ['ND', 'L', 'M', 'H'],\n};\nconst scores = {\n    'AV': {\n        'L': 0.395,\n        'A': 0.646,\n        'N': 1.0,\n    },\n    'AC': {\n        'H': 0.35,\n        'M': 0.61,\n        'L': 0.71,\n    },\n    'Au': {\n        'M': 0.45,\n        'S': 0.56,\n        'N': 0.704,\n    },\n    'CIA': {\n        'N': 0.0,\n        'P': 0.275,\n        'C': 0.660,\n    },\n    'E': {\n        'U': 0.85,\n        'POC': 0.9,\n        'F': 0.95,\n        'H': 1.0,\n        'ND': 1.0,\n    },\n    'RL': {\n        'OF': 0.87,\n        'TF': 0.90,\n        'W': 0.95,\n        'U': 1.0,\n        'ND': 1.0,\n    },\n    'RC': {\n        'UC': 0.90,\n        'UR': 0.95,\n        'C': 1.0,\n        'ND': 1.0,\n    },\n    'CDP': {\n        'N': 0,\n        'ND': 0,\n        'L': 0.1,\n        'LM': 0.3,\n        'MH': 0.4,\n        'H': 0.5,\n    },\n    'TD': {\n        'N': 0,\n        'L': 0.25,\n        'M': 0.75,\n        'H': 1.0,\n        'ND': 1.0,\n    },\n    'CIAR': {\n        'L': 0.5,\n        'M': 1.0,\n        'ND': 1.0,\n        'H': 0.51,\n    },\n};\n", "import * as errors from './errors';\nconst cvss30header = 'CVSS:3.0/';\n/**\n * Implementation of the CVSS v3.0 specification (https://www.first.org/cvss/v3.0/specification-document).\n */\nexport class CVSS30 {\n    /**\n     * Construct a CVSS v3.0 object, and parse the vector if provided.\n     * If not, the Base metrics is set to the default values (score = 0).\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    constructor(vector = 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N') {\n        this._metrics = {\n            // Set default values of non-mandatory metrics : Not Defined (X)\n            // => Temporal\n            'E': 'X', 'RL': 'X', 'RC': 'X',\n            // => Environmental\n            'CR': 'X', 'IR': 'X', 'AR': 'X', 'MAV': 'X', 'MAC': 'X', 'MPR': 'X', 'MUI': 'X', 'MS': 'X', 'MC': 'X', 'MI': 'X', 'MA': 'X'\n        };\n        this.parse(vector);\n    }\n    /**\n     * Parse the provided vector.\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    parse(vector) {\n        // Check header\n        if (!vector.startsWith(cvss30header)) {\n            throw new Error('invalid vector');\n        }\n        vector = vector.substring(cvss30header.length);\n        // Parse vector\n        let kvm = {};\n        let metrics = vector.split('/');\n        for (let metric of metrics) {\n            let pts = metric.split(':');\n            if (pts.length != 2) {\n                throw new Error('invalid vector');\n            }\n            if (kvm[pts[0]] != undefined) {\n                throw new Error('metric ' + pts[0] + ' already defined');\n            }\n            kvm[pts[0]] = pts[1];\n            this.Set(pts[0], pts[1]);\n        }\n        // Check all mandatory metrics are defined\n        if (['AV', 'AC', 'AT', 'PR', 'UI', 'S', 'C', 'I', 'A'].some((metric) => { this._metrics[metric] == undefined; })) {\n            throw new Error('all mandatory metrics are not provided');\n        }\n    }\n    /**\n     * Return the vector string representation of the CVSS v3.0 object.\n     *\n     * @return The vector string representation.\n     */\n    Vector() {\n        let vector = 'CVSS:3.0';\n        for (let metric in Object.entries(this._metrics)) {\n            let value = this.Get(metric);\n            if (value == 'X') {\n                continue;\n            }\n            vector += '/' + metric + ':' + value;\n        }\n        return vector;\n    }\n    /**\n     * Get the metric value given its value (e.g. 'AV').\n     *\n     * @param metric The metric to get the value of.\n     * @return The corresponding metric value.\n     * @throws Metric does not exist.\n     */\n    Get(metric) {\n        const v = this._metrics[metric];\n        if (v == undefined) {\n            throw new errors.InvalidMetric('3.0', metric);\n        }\n        return v;\n    }\n    /**\n     * Set the metric value given its key and value (e.g. 'AV' and 'L').\n     *\n     * @param metric The metric to set the value of.\n     * @param value The corresponding metric value.\n     * @throws Metric does not exist or has an invalid value.\n     */\n    Set(metric, value) {\n        if (metricValues[metric] == undefined) {\n            throw new errors.InvalidMetric('3.0', metric);\n        }\n        if (!metricValues[metric].includes(value)) {\n            throw new errors.InvalidMetricValue('3.0', metric, value);\n        }\n        this._metrics[metric] = value;\n    }\n    /**\n     * Compute the CVSS v3.0 Impact of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 30.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Impact() {\n        const c = scores['CIA'][this._metrics['C']];\n        const i = scores['CIA'][this._metrics['I']];\n        const a = scores['CIA'][this._metrics['A']];\n        const iss = 1 - ((1 - c) * (1 - i) * (1 - a));\n        if (this._metrics['S'] == 'U') {\n            return 6.42 * iss;\n        }\n        return 7.52 * (iss - 0.029) - 3.25 * Math.pow((iss - 0.02), 15);\n    }\n    /**\n     * Compute the CVSS v3.0 Exploitability of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 30.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Exploitability() {\n        const av = scores['AV'][this._metrics['AV']];\n        const ac = scores['AC'][this._metrics['AC']];\n        const pr = scores['PR'][this._metrics['PR']][this._metrics['S']];\n        const ui = scores['UI'][this._metrics['UI']];\n        return 8.22 * av * ac * pr * ui;\n    }\n    /**\n     * Compute the CVSS v3.0 Base Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 30.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    BaseScore() {\n        const impact = this.Impact();\n        const exploitability = this.Exploitability();\n        if (impact <= 0) {\n            return 0;\n        }\n        if (this._metrics['S'] == 'U') {\n            return CVSS30.roundup(Math.min(impact + exploitability, 10));\n        }\n        return CVSS30.roundup(Math.min(1.08 * (impact + exploitability), 10));\n    }\n    /**\n     * Compute the CVSS v3.0 Temporal Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 30.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    TemporalScore() {\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        return CVSS30.roundup(this.BaseScore() * e * rl * rc);\n    }\n    /**\n     * Compute the CVSS v3.0 Environmental Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 30.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    EnvironmentalScore() {\n        const mav = scores['AV'][this.getReal('AV')];\n        const mac = scores['AC'][this.getReal('AC')];\n        const mpr = scores['PR'][this.getReal('PR')][this._metrics['S']];\n        const mui = scores['UI'][this.getReal('UI')];\n        const s = this.getReal('S');\n        const c = scores['CIA'][this.getReal('C')];\n        const i = scores['CIA'][this.getReal('I')];\n        const a = scores['CIA'][this.getReal('A')];\n        const cr = scores['CIAR'][this._metrics['CR']];\n        const ir = scores['CIAR'][this._metrics['IR']];\n        const ar = scores['CIAR'][this._metrics['AR']];\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        const miss = Math.min(1 - (1 - cr * c) * (1 - ir * i) * (1 - ar * a), 0.915);\n        let modifiedImpact;\n        if (s == 'U') {\n            modifiedImpact = 6.42 * miss;\n        }\n        else {\n            modifiedImpact = 7.52 * (miss - 0.029) - 3.25 * Math.pow((miss - 0.02), 15);\n        }\n        let modifiedExploitability = 8.22 * mav * mac * mpr * mui;\n        if (modifiedImpact <= 0) {\n            return 0;\n        }\n        if (s == 'U') {\n            return CVSS30.roundup(CVSS30.roundup(Math.min(modifiedImpact + modifiedExploitability, 10)) * e * rl * rc);\n        }\n        return CVSS30.roundup(CVSS30.roundup(Math.min(1.08 * (modifiedImpact + modifiedExploitability), 10)) * e * rl * rc);\n    }\n    getReal(metric) {\n        if (['AV', 'AC', 'PR', 'UI', 'S', 'C', 'I', 'A'].includes(metric)) {\n            const v = this.Get('M' + metric);\n            if (v != 'X') {\n                return v;\n            }\n            return this.Get(metric);\n        }\n        return this.Get(metric);\n    }\n    static roundup(x) {\n        let bx = Math.round(x * 100000);\n        if (bx % 1000 == 0) {\n            return bx / 100000;\n        }\n        return (Math.floor(bx / 10000) + 1) / 10;\n    }\n    /**\n     * Give the corresponding rating of the provided score.\n     *\n     * @param score The score to rate.\n     * @return The rating.\n     * @throws When the score is out of bounds.\n     */\n    static Rating(score) {\n        if (score < 0 || score > 10) {\n            throw new Error('score out of bounds');\n        }\n        if (score >= 9.0) {\n            return 'CRITICAL';\n        }\n        if (score >= 7.0) {\n            return 'HIGH';\n        }\n        if (score >= 4.0) {\n            return 'MEDIUM';\n        }\n        if (score >= 0.1) {\n            return 'LOW';\n        }\n        return 'NONE';\n    }\n}\nconst metricValues = {\n    'AV': ['N', 'A', 'L', 'P'],\n    'AC': ['L', 'H'],\n    'PR': ['N', 'L', 'H'],\n    'UI': ['N', 'R'],\n    'S': ['U', 'C'],\n    'C': ['H', 'L', 'N'],\n    'I': ['H', 'L', 'N'],\n    'A': ['H', 'L', 'N'],\n    'E': ['X', 'H', 'F', 'P', 'U'],\n    'RL': ['X', 'U', 'W', 'T', 'O'],\n    'RC': ['X', 'C', 'R', 'U'],\n    'CR': ['X', 'H', 'M', 'L'],\n    'IR': ['X', 'H', 'M', 'L'],\n    'AR': ['X', 'H', 'M', 'L'],\n    'MAV': ['X', 'N', 'A', 'L', 'P'],\n    'MAC': ['X', 'L', 'H'],\n    'MPR': ['X', 'N', 'L', 'H'],\n    'MUI': ['X', 'N', 'R'],\n    'MS': ['X', 'U', 'C'],\n    'MC': ['X', 'H', 'L', 'N'],\n    'MI': ['X', 'H', 'L', 'N'],\n    'MA': ['X', 'H', 'L', 'N'],\n};\nconst scores = {\n    'AV': {\n        'N': 0.85,\n        'A': 0.62,\n        'L': 0.55,\n        'P': 0.2,\n    },\n    'AC': {\n        'L': 0.77,\n        'H': 0.44,\n    },\n    'PR': {\n        'N': {\n            'U': 0.85,\n            'C': 0.85,\n        },\n        'L': {\n            'U': 0.62,\n            'C': 0.68,\n        },\n        'H': {\n            'U': 0.27,\n            'C': 0.5,\n        },\n    },\n    'UI': {\n        'N': 0.85,\n        'R': 0.62,\n    },\n    'CIA': {\n        'H': 0.56,\n        'L': 0.22,\n        'N': 0,\n    },\n    'E': {\n        'X': 1,\n        'H': 1,\n        'F': 0.97,\n        'P': 0.94,\n        'U': 0.91,\n    },\n    'RL': {\n        'X': 1,\n        'U': 1,\n        'W': 0.97,\n        'T': 0.96,\n        'O': 0.95,\n    },\n    'RC': {\n        'X': 1,\n        'C': 1,\n        'R': 0.96,\n        'U': 0.92,\n    },\n    'CIAR': {\n        'X': 1,\n        'M': 1,\n        'H': 1.5,\n        'L': 0.5,\n    },\n};\n", "import * as errors from './errors';\nconst cvss31header = 'CVSS:3.1/';\n/**\n * Implementation of the CVSS v3.1 specification (https://www.first.org/cvss/v3.1/specification-document).\n */\nexport class CVSS31 {\n    /**\n     * Construct a CVSS v3.1 object, and parse the vector if provided.\n     * If not, the Base metrics is set to the default values (score = 0).\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    constructor(vector = 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N') {\n        this._metrics = {\n            // Set default values of non-mandatory metrics : Not Defined (X)\n            // => Temporal\n            'E': 'X', 'RL': 'X', 'RC': 'X',\n            // => Environmental\n            'CR': 'X', 'IR': 'X', 'AR': 'X', 'MAV': 'X', 'MAC': 'X', 'MPR': 'X', 'MUI': 'X', 'MS': 'X', 'MC': 'X', 'MI': 'X', 'MA': 'X'\n        };\n        this.parse(vector);\n    }\n    /**\n     * Parse the provided vector.\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    parse(vector) {\n        // Check header\n        if (!vector.startsWith(cvss31header)) {\n            throw new Error('invalid vector');\n        }\n        vector = vector.substring(cvss31header.length);\n        // Parse vector\n        let kvm = {};\n        let metrics = vector.split('/');\n        for (let metric of metrics) {\n            let pts = metric.split(':');\n            if (pts.length != 2) {\n                throw new Error('invalid vector');\n            }\n            if (kvm[pts[0]] != undefined) {\n                throw new Error('metric ' + pts[0] + ' already defined');\n            }\n            kvm[pts[0]] = pts[1];\n            this.Set(pts[0], pts[1]);\n        }\n        // Check all mandatory metrics are defined\n        if (['AV', 'AC', 'AT', 'PR', 'UI', 'S', 'C', 'I', 'A'].some((metric) => { this._metrics[metric] == undefined; })) {\n            throw new Error('all mandatory metrics are not provided');\n        }\n    }\n    /**\n     * Return the vector string representation of the CVSS v3.1 object.\n     *\n     * @return The vector string representation.\n     */\n    Vector() {\n        let vector = 'CVSS:3.1';\n        for (let metric in Object.entries(this._metrics)) {\n            let value = this.Get(metric);\n            if (value == 'X') {\n                continue;\n            }\n            vector += '/' + metric + ':' + value;\n        }\n        return vector;\n    }\n    /**\n     * Get the metric value given its value (e.g. 'AV').\n     *\n     * @param metric The metric to get the value of.\n     * @return The corresponding metric value.\n     * @throws Metric does not exist.\n     */\n    Get(metric) {\n        const v = this._metrics[metric];\n        if (v == undefined) {\n            throw new errors.InvalidMetric('3.1', metric);\n        }\n        return v;\n    }\n    /**\n     * Set the metric value given its key and value (e.g. 'AV' and 'L').\n     *\n     * @param metric The metric to set the value of.\n     * @param value The corresponding metric value.\n     * @throws Metric does not exist or has an invalid value.\n     */\n    Set(metric, value) {\n        if (metricValues[metric] == undefined) {\n            throw new errors.InvalidMetric('3.1', metric);\n        }\n        if (!metricValues[metric].includes(value)) {\n            throw new errors.InvalidMetricValue('3.1', metric, value);\n        }\n        this._metrics[metric] = value;\n    }\n    /**\n     * Compute the CVSS v3.1 Impact of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 31.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Impact() {\n        const c = scores['CIA'][this._metrics['C']];\n        const i = scores['CIA'][this._metrics['I']];\n        const a = scores['CIA'][this._metrics['A']];\n        const iss = 1 - ((1 - c) * (1 - i) * (1 - a));\n        if (this._metrics['S'] == 'U') {\n            return 6.42 * iss;\n        }\n        return 7.52 * (iss - 0.029) - 3.25 * Math.pow((iss - 0.02), 15);\n    }\n    /**\n     * Compute the CVSS v3.1 Exploitability of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 31.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Exploitability() {\n        const av = scores['AV'][this._metrics['AV']];\n        const ac = scores['AC'][this._metrics['AC']];\n        const pr = scores['PR'][this._metrics['PR']][this._metrics['S']];\n        const ui = scores['UI'][this._metrics['UI']];\n        return 8.22 * av * ac * pr * ui;\n    }\n    /**\n     * Compute the CVSS v3.1 Base Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 31.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    BaseScore() {\n        const impact = this.Impact();\n        const exploitability = this.Exploitability();\n        if (impact <= 0) {\n            return 0;\n        }\n        if (this._metrics['S'] == 'U') {\n            return CVSS31.roundup(Math.min(impact + exploitability, 10));\n        }\n        return CVSS31.roundup(Math.min(1.08 * (impact + exploitability), 10));\n    }\n    /**\n     * Compute the CVSS v3.1 Temporal Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 31.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    TemporalScore() {\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        return CVSS31.roundup(this.BaseScore() * e * rl * rc);\n    }\n    /**\n     * Compute the CVSS v3.1 Environmental Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 31.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    EnvironmentalScore() {\n        const mav = scores['AV'][this.getReal('AV')];\n        const mac = scores['AC'][this.getReal('AC')];\n        const mpr = scores['PR'][this.getReal('PR')][this._metrics['S']];\n        const mui = scores['UI'][this.getReal('UI')];\n        const s = this.getReal('S');\n        const c = scores['CIA'][this.getReal('C')];\n        const i = scores['CIA'][this.getReal('I')];\n        const a = scores['CIA'][this.getReal('A')];\n        const cr = scores['CIAR'][this._metrics['CR']];\n        const ir = scores['CIAR'][this._metrics['IR']];\n        const ar = scores['CIAR'][this._metrics['AR']];\n        const e = scores['E'][this._metrics['E']];\n        const rl = scores['RL'][this._metrics['RL']];\n        const rc = scores['RC'][this._metrics['RC']];\n        const miss = Math.min(1 - (1 - cr * c) * (1 - ir * i) * (1 - ar * a), 0.915);\n        let modifiedImpact;\n        if (s == 'U') {\n            modifiedImpact = 6.42 * miss;\n        }\n        else {\n            modifiedImpact = 7.52 * (miss - 0.029) - 3.25 * Math.pow((miss * 0.9731 - 0.02), 13);\n        }\n        let modifiedExploitability = 8.22 * mav * mac * mpr * mui;\n        if (modifiedImpact <= 0) {\n            return 0;\n        }\n        if (s == 'U') {\n            return CVSS31.roundup(CVSS31.roundup(Math.min(modifiedImpact + modifiedExploitability, 10)) * e * rl * rc);\n        }\n        return CVSS31.roundup(CVSS31.roundup(Math.min(1.08 * (modifiedImpact + modifiedExploitability), 10)) * e * rl * rc);\n    }\n    getReal(metric) {\n        if (['AV', 'AC', 'PR', 'UI', 'S', 'C', 'I', 'A'].includes(metric)) {\n            const v = this.Get('M' + metric);\n            if (v != 'X') {\n                return v;\n            }\n            return this.Get(metric);\n        }\n        return this.Get(metric);\n    }\n    static roundup(x) {\n        let bx = Math.round(x * 100000);\n        if (bx % 1000 == 0) {\n            return bx / 100000;\n        }\n        return (Math.floor(bx / 10000) + 1) / 10;\n    }\n    /**\n     * Give the corresponding rating of the provided score.\n     *\n     * @param score The score to rate.\n     * @return The rating.\n     * @throws When the score is out of bounds.\n     */\n    static Rating(score) {\n        if (score < 0 || score > 10) {\n            throw new Error('score out of bounds');\n        }\n        if (score >= 9.0) {\n            return 'CRITICAL';\n        }\n        if (score >= 7.0) {\n            return 'HIGH';\n        }\n        if (score >= 4.0) {\n            return 'MEDIUM';\n        }\n        if (score >= 0.1) {\n            return 'LOW';\n        }\n        return 'NONE';\n    }\n}\nconst metricValues = {\n    'AV': ['N', 'A', 'L', 'P'],\n    'AC': ['L', 'H'],\n    'PR': ['N', 'L', 'H'],\n    'UI': ['N', 'R'],\n    'S': ['U', 'C'],\n    'C': ['H', 'L', 'N'],\n    'I': ['H', 'L', 'N'],\n    'A': ['H', 'L', 'N'],\n    'E': ['X', 'H', 'F', 'P', 'U'],\n    'RL': ['X', 'U', 'W', 'T', 'O'],\n    'RC': ['X', 'C', 'R', 'U'],\n    'CR': ['X', 'H', 'M', 'L'],\n    'IR': ['X', 'H', 'M', 'L'],\n    'AR': ['X', 'H', 'M', 'L'],\n    'MAV': ['X', 'N', 'A', 'L', 'P'],\n    'MAC': ['X', 'L', 'H'],\n    'MPR': ['X', 'N', 'L', 'H'],\n    'MUI': ['X', 'N', 'R'],\n    'MS': ['X', 'U', 'C'],\n    'MC': ['X', 'H', 'L', 'N'],\n    'MI': ['X', 'H', 'L', 'N'],\n    'MA': ['X', 'H', 'L', 'N'],\n};\nconst scores = {\n    'AV': {\n        'N': 0.85,\n        'A': 0.62,\n        'L': 0.55,\n        'P': 0.2,\n    },\n    'AC': {\n        'L': 0.77,\n        'H': 0.44,\n    },\n    'PR': {\n        'N': {\n            'U': 0.85,\n            'C': 0.85,\n        },\n        'L': {\n            'U': 0.62,\n            'C': 0.68,\n        },\n        'H': {\n            'U': 0.27,\n            'C': 0.5,\n        },\n    },\n    'UI': {\n        'N': 0.85,\n        'R': 0.62,\n    },\n    'CIA': {\n        'H': 0.56,\n        'L': 0.22,\n        'N': 0,\n    },\n    'E': {\n        'X': 1,\n        'H': 1,\n        'F': 0.97,\n        'P': 0.94,\n        'U': 0.91,\n    },\n    'RL': {\n        'X': 1,\n        'U': 1,\n        'W': 0.97,\n        'T': 0.96,\n        'O': 0.95,\n    },\n    'RC': {\n        'X': 1,\n        'C': 1,\n        'R': 0.96,\n        'U': 0.92,\n    },\n    'CIAR': {\n        'X': 1,\n        'M': 1,\n        'H': 1.5,\n        'L': 0.5,\n    },\n};\n", "import * as errors from './errors';\n// Comes from https://www.first.org/cvss/cvss-v4.0.json, slightly modified\n// to match the metric groups without false-positives and to avoid double-capture\n// of Provider Urgency (U) due to multi-char values.\nconst re = /^CVSS:4[.]0(\\/AV:[NALP])(\\/AC:[LH])(\\/AT:[NP])(\\/PR:[NLH])(\\/UI:[NPA])(\\/VC:[HLN])(\\/VI:[HLN])(\\/VA:[HLN])(\\/SC:[HLN])(\\/SI:[HLN])(\\/SA:[HLN])(\\/E:[XAPU])?(\\/CR:[XHML])?(\\/IR:[XHML])?(\\/AR:[XHML])?(\\/MAV:[XNALP])?(\\/MAC:[XLH])?(\\/MAT:[XNP])?(\\/MPR:[XNLH])?(\\/MUI:[XNPA])?(\\/MVC:[XNLH])?(\\/MVI:[XNLH])?(\\/MVA:[XNLH])?(\\/MSC:[XNLH])?(\\/MSI:[XNLHS])?(\\/MSA:[XNLHS])?(\\/S:[XNP])?(\\/AU:[XNY])?(\\/R:[XAUI])?(\\/V:[XDC])?(\\/RE:[XLMH])?(\\/U:(?:X|Clear|Green|Amber|Red))?$/g;\n/**\n * Implementation of the CVSS v4.0 specification (https://www.first.org/cvss/v4.0/specification-document).\n */\nexport class CVSS40 {\n    /**\n     * Construct a CVSS v4.0 object, and parse the vector if provided.\n     * If not, the Base metrics is set to the default values (score = 0).\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    constructor(vector = 'CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:N/SC:N/SI:N/SA:N') {\n        this._metrics = {\n            // Set default values of non-mandatory metrics : Not Defined (X)\n            // => Threat\n            'E': 'X',\n            // => Environmental\n            'CR': 'X', 'IR': 'X', 'AR': 'X', 'MAV': 'X', 'MAC': 'X', 'MAT': 'X', 'MPR': 'X', 'MUI': 'X', 'MVC': 'X', 'MVI': 'X', 'MVA': 'X', 'MSC': 'X', 'MSI': 'X', 'MSA': 'X',\n            // => Supplemental\n            'S': 'X', 'AU': 'X', 'R': 'X', 'V': 'X', 'RE': 'X', 'U': 'X',\n        };\n        this.parse(vector);\n    }\n    /**\n     * Parse the provided vector.\n     * Makes use of the regex for code simplicity, but we could use the\n     * `metrics` constant to provide better accurate error messages.\n     *\n     * @param vector The vector to parse.\n     * @throws When the vector is invalid.\n     */\n    parse(vector) {\n        // Ensure input is valid according to the regular expression\n        let matches = vector.matchAll(re).next().value;\n        if (matches == undefined) {\n            throw new Error('invalid CVSS v4.0 vector');\n        }\n        // Skip prefix\n        matches.shift();\n        // Parse each metric group\n        for (let match of matches) {\n            if (match == undefined) {\n                continue;\n            }\n            match = match.slice(1);\n            const pts = match.split(':');\n            this._metrics[pts[0]] = pts[1];\n        }\n    }\n    /**\n     * Return the vector string representation of the CVSS v4.0 object.\n     *\n     * @return The vector string representation.\n     */\n    Vector() {\n        let vector = 'CVSS:4.0';\n        for (const [om] of Object.entries(table23)) {\n            const metric = this.Get(om);\n            // Add the value iif was set and is not 'X' (Not Defined)\n            if (metric == undefined || metric == 'X') {\n                continue;\n            }\n            vector = vector.concat('/', om, ':', metric);\n        }\n        return vector;\n    }\n    /**\n     * Get the metric value given its value (e.g. 'AV').\n     *\n     * @param metric The metric to get the value of.\n     * @return The corresponding metric value.\n     * @throws Metric does not exist.\n     */\n    Get(metric) {\n        const v = this._metrics[metric];\n        if (v == undefined) {\n            throw new errors.InvalidMetric('4.0', metric);\n        }\n        return v;\n    }\n    /**\n     * Set the metric value given its key and value (e.g. 'AV' and 'L').\n     *\n     * @param metric The metric to set the value of.\n     * @param value The corresponding metric value.\n     * @throws Metric does not exist or has an invalid value.\n     */\n    Set(metric, value) {\n        const values = table23[metric];\n        if (values == undefined) {\n            throw new errors.InvalidMetric('4.0', metric);\n        }\n        if (!values.includes(value)) {\n            throw new errors.InvalidMetricValue('4.0', metric, value);\n        }\n        this._metrics[metric] = value;\n    }\n    /**\n     * Compute the CVSS v4.0 Score of the current object, given its metrics and their\n     * corresponding values.\n     *\n     * The implementation internals are largely based upon https://github.com/pandatix/go-cvss\n     * submodule 40.\n     *\n     * @return The score (between 0.0 and 10.0 both included).\n     */\n    Score() {\n        // If the vulnerability does not affect the system AND the subsequent\n        // system, there is no reason to try scoring what has no risk and impact.\n        if (['VC', 'VI', 'VA', 'SC', 'SI', 'SA'].every((met) => this.getReal(met) == \"N\")) {\n            return 0.0;\n        }\n        const mv = this.macrovector();\n        const eq1 = Number(mv[0]);\n        const eq2 = Number(mv[1]);\n        const eq3 = Number(mv[2]);\n        const eq4 = Number(mv[3]);\n        const eq5 = Number(mv[4]);\n        const eq6 = Number(mv[5]);\n        const eqsv = mvs[mv];\n        // Compute EQs next lower MacroVector\n        // -> As the lower the EQ value is the bigger, the next lower MacroVector\n        //    would be +1 to this one\n        // -> If not possible (level+1 > level), it is set to NaN\n        let lower = 0;\n        let eq1nlm = NaN;\n        if (eq1 < 2) { // 2 = maximum level for EQ1\n            eq1nlm = mvs[String(eq1 + 1) + String(eq2) + String(eq3) + String(eq4) + String(eq5) + String(eq6)];\n            lower++;\n        }\n        let eq2nlm = NaN;\n        if (eq2 < 1) { // 1 = maximum level for EQ2\n            eq2nlm = mvs[String(eq1) + String(eq2 + 1) + String(eq3) + String(eq4) + String(eq5) + String(eq6)];\n            lower++;\n        }\n        let eq4nlm = NaN;\n        if (eq4 < 2) { // 2 = maximum level for EQ4\n            eq4nlm = mvs[String(eq1) + String(eq2) + String(eq3) + String(eq4 + 1) + String(eq5) + String(eq6)];\n            lower++;\n        }\n        let eq5nlm = NaN;\n        if (eq5 < 2) { // 2 = maximum level for EQ5\n            eq5nlm = mvs[String(eq1) + String(eq2) + String(eq3) + String(eq4) + String(eq5 + 1) + String(eq6)];\n            lower++;\n        }\n        // /!\\ As EQ3 and EQ6 are related, we can't do the same as it could produce\n        // eq3=2 and eq6=0 which is impossible thus will have a lookup (for EQ3) of 0.\n        // This would fail the further computations.\n        let eq3eq6nlm = NaN;\n        if (eq3 == 1 && eq6 == 1) {\n            // 11 -> 21\n            eq3eq6nlm = mvs[String(eq1) + String(eq2) + String(eq3 + 1) + String(eq4) + String(eq5) + String(eq6)];\n            lower++;\n        }\n        else if (eq3 == 0 && eq6 == 1) {\n            // 01 -> 11\n            eq3eq6nlm = mvs[String(eq1) + String(eq2) + String(eq3 + 1) + String(eq4) + String(eq5) + String(eq6)];\n            lower++;\n        }\n        else if (eq3 == 1 && eq6 == 0) {\n            // 10 -> 11\n            eq3eq6nlm = mvs[String(eq1) + String(eq2) + String(eq3) + String(eq4) + String(eq5) + String(eq6 + 1)];\n            lower++;\n        }\n        else if (eq3 == 0 && eq6 == 0) {\n            // 00 -> 01 OR 00 -> 10, takes the bigger\n            eq3eq6nlm = Math.max(mvs[String(eq1) + String(eq2) + String(eq3 + 1) + String(eq4) + String(eq5) + String(eq6)], mvs[String(eq1) + String(eq2) + String(eq3) + String(eq4) + String(eq5) + String(eq6 + 1)]);\n            lower++;\n        }\n        // 1.a - Compute maximal scoring (absolute) differences\n        const msd = ((nlm) => {\n            let msd = Math.abs(nlm - eqsv);\n            if (isNaN(msd)) {\n                return 0;\n            }\n            return msd;\n        });\n        let eq1msd = msd(eq1nlm);\n        let eq2msd = msd(eq2nlm);\n        let eq3eq6msd = msd(eq3eq6nlm);\n        let eq4msd = msd(eq4nlm);\n        let eq5msd = msd(eq5nlm);\n        // 1.b - Compute the severity distances of the to-be scored vectors\n        //       to a highest AND higher severity vector in the MacroVector\n        let eq1svdst = 0, eq2svdst = 0, eq3eq6svdst = 0, eq4svdst = 0, eq5svdst = 0;\n        for (const eq1mx of highestSeverityVectors[1][eq1]) {\n            for (const eq2mx of highestSeverityVectors[2][eq2]) {\n                for (const eq3eq6mx of highestSeverityVectors[3][eq3][eq6]) {\n                    for (const eq4mx of highestSeverityVectors[4][eq4]) {\n                        // Don't need to iterate over eq5, only one dimension is involved\n                        // so the highest of a MV's EQ is always unique, such that iterating\n                        // over it would lead to nothing but cognitive complexity.\n                        const partial = [eq1mx, eq2mx, eq3eq6mx, eq4mx].join('/');\n                        // Compute severity distances\n                        const avsvdst = CVSS40.severityDistance('AV', this.getReal('AV'), CVSS40.getValue(partial, 'AV'));\n                        const prsvdst = CVSS40.severityDistance('PR', this.getReal('PR'), CVSS40.getValue(partial, 'PR'));\n                        const uisvdst = CVSS40.severityDistance('UI', this.getReal('UI'), CVSS40.getValue(partial, 'UI'));\n                        const acsvdst = CVSS40.severityDistance('AC', this.getReal('AC'), CVSS40.getValue(partial, 'AC'));\n                        const atsvdst = CVSS40.severityDistance('AT', this.getReal('AT'), CVSS40.getValue(partial, 'AT'));\n                        const vcsvdst = CVSS40.severityDistance('VC', this.getReal('VC'), CVSS40.getValue(partial, 'VC'));\n                        const visvdst = CVSS40.severityDistance('VI', this.getReal('VI'), CVSS40.getValue(partial, 'VI'));\n                        const vasvdst = CVSS40.severityDistance('VA', this.getReal('VA'), CVSS40.getValue(partial, 'VA'));\n                        const scsvdst = CVSS40.severityDistance('SC', this.getReal('SC'), CVSS40.getValue(partial, 'SC'));\n                        const sisvdst = CVSS40.severityDistance('SI', this.getReal('SI'), CVSS40.getValue(partial, 'SI'));\n                        const sasvdst = CVSS40.severityDistance('SA', this.getReal('SA'), CVSS40.getValue(partial, 'SA'));\n                        const crsvdst = CVSS40.severityDistance('CR', this.getReal('CR'), CVSS40.getValue(partial, 'CR'));\n                        const irsvdst = CVSS40.severityDistance('IR', this.getReal('IR'), CVSS40.getValue(partial, 'IR'));\n                        const arsvdst = CVSS40.severityDistance('AR', this.getReal('AR'), CVSS40.getValue(partial, 'AR'));\n                        if ([avsvdst, prsvdst, uisvdst, acsvdst, atsvdst, vcsvdst, visvdst, vasvdst, scsvdst, sisvdst, sasvdst, crsvdst, irsvdst, arsvdst].some((met) => met < 0)) {\n                            continue;\n                        }\n                        eq1svdst = avsvdst + prsvdst + uisvdst;\n                        eq2svdst = acsvdst + atsvdst;\n                        eq3eq6svdst = vcsvdst + visvdst + vasvdst + crsvdst + irsvdst + arsvdst;\n                        eq4svdst = scsvdst + sisvdst + sasvdst;\n                        // Don't need to compute E severity distance as the maximum will\n                        // always remain the same due to only 1 dimension involved in EQ5.\n                        eq5svdst = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        // 1.c - Compute proportion of the distance\n        const eq1prop = eq1svdst / (depth[1][eq1] + 1);\n        const eq2prop = eq2svdst / (depth[2][eq2] + 1);\n        const eq3eq6prop = eq3eq6svdst / (depth[3][eq3][eq6] + 1);\n        const eq4prop = eq4svdst / (depth[4][eq4] + 1);\n        const eq5prop = eq5svdst / (depth[5][eq5] + 1);\n        // 1.d - Multiply maximal scoring diff. by prop. of distance\n        eq1msd *= eq1prop;\n        eq2msd *= eq2prop;\n        eq3eq6msd *= eq3eq6prop;\n        eq4msd *= eq4prop;\n        eq5msd *= eq5prop;\n        // 2 - Compute mean\n        let mean = 0;\n        if (lower != 0) {\n            mean = (eq1msd + eq2msd + eq3eq6msd + eq4msd + eq5msd) / lower;\n        }\n        // 3 - Compute score\n        return CVSS40.roundup(eqsv - mean);\n    }\n    /**\n     * Gives the nomenclature of the current CVSS v4.0 object i.e. its structure\n     * according to the Base, Threat and Environmental metric groups.\n     *\n     * @return The nomenclature string.\n     */\n    Nomenclature() {\n        const isDefined = ((metric) => this.Get(metric) != 'X');\n        const t = (['E']).some(isDefined);\n        const e = (['CR', 'IR', 'AR', 'MAV', 'MAC', 'MAT', 'MPR', 'MUI', 'MVC', 'MVI', 'MVA', 'MSC', 'MSI', 'MSA']).some(isDefined);\n        if (t) {\n            if (e) {\n                return 'CVSS-BTE';\n            }\n            return 'CVSS-BT';\n        }\n        if (e) {\n            return 'CVSS-BE';\n        }\n        return 'CVSS-B';\n    }\n    getReal(metric) {\n        if (['AV', 'AC', 'AT', 'PR', 'UI', 'VC', 'VI', 'VA', 'SC', 'SI', 'SA'].includes(metric)) {\n            const v = this.Get('M' + metric);\n            if (v != 'X') {\n                return v;\n            }\n            return this.Get(metric);\n        }\n        const v = this.Get(metric);\n        if (v != 'X') {\n            return v;\n        }\n        // If it was not a base metric then defaults\n        switch (metric) {\n            case 'CR':\n            case 'IR':\n            case 'AR':\n                return 'H';\n            case 'E':\n                return 'A';\n        }\n    }\n    macrovector() {\n        const av = this.getReal('AV');\n        const ac = this.getReal('AC');\n        const at = this.getReal('AT');\n        const pr = this.getReal('PR');\n        const ui = this.getReal('UI');\n        const vc = this.getReal('VC');\n        const vi = this.getReal('VI');\n        const va = this.getReal('VA');\n        const sc = this.getReal('SC');\n        const si = this.getReal('SI');\n        const sa = this.getReal('SA');\n        const e = this.getReal('E');\n        const cr = this.getReal('CR');\n        const ir = this.getReal('IR');\n        const ar = this.getReal('AR');\n        // Compte MacroVectors\n        // => EQ1\n        let eq1 = '0';\n        if (av == 'N' && pr == 'N' && ui == 'N') {\n            eq1 = '0';\n        }\n        else if ((av == 'N' || pr == 'N' || ui == 'N') && !(av == 'N' && pr == 'N' && ui == 'N') && !(av == 'P')) {\n            eq1 = '1';\n        }\n        else if (av == 'P' || !(av == 'N' || pr == 'N' || ui == 'N')) {\n            eq1 = '2';\n        }\n        // EQ2\n        let eq2 = '0';\n        if (!(ac == 'L' && at == 'N')) {\n            eq2 = '1';\n        }\n        // EQ3\n        let eq3 = '0';\n        if (vc == 'H' && vi == 'H') {\n            eq3 = '0';\n        }\n        else if (!(vc == 'H' && vi == 'H') && (vc == 'H' || vi == 'H' || va == 'H')) {\n            eq3 = '1';\n        }\n        else if (!(vc == 'H' || vi == 'H' || va == 'H')) {\n            eq3 = '2';\n        }\n        // EQ4\n        let eq4 = '0';\n        if (si == 'S' || sa == 'S') {\n            eq4 = '0';\n        }\n        else if (!(si == 'S' || sa == 'S') && (sc == 'H' || si == 'H' || sa == 'H')) {\n            eq4 = '1';\n        }\n        else if (!(si == 'S' || sa == 'S') && !(sc == 'H' || si == 'H' || sa == 'H')) {\n            eq4 = '2';\n        }\n        // EQ5\n        let eq5 = '0';\n        if (e == 'A' || e == 'X') {\n            eq5 = '0';\n        }\n        else if (e == 'P') {\n            eq5 = '1';\n        }\n        else if (e == 'U') {\n            eq5 = '2';\n        }\n        // EQ6\n        let eq6 = '0';\n        const crh = (cr == 'H' || cr == 'X');\n        const irh = (ir == 'H' || ir == 'X');\n        const arh = (ar == 'H' || ar == 'X');\n        if ((crh && vc == 'H') || (irh && vi == 'H') || (arh && va == 'H')) {\n            eq6 = '0';\n        }\n        else if (!(crh && vc == 'H') && !(irh && vi == 'H') && !(arh && va == 'H')) {\n            eq6 = '1';\n        }\n        return eq1 + eq2 + eq3 + eq4 + eq5 + eq6;\n    }\n    static severityDistance(metric, vecVal, mxVal) {\n        const values = sevIdx[metric];\n        return values.indexOf(vecVal) - values.indexOf(mxVal);\n    }\n    static getValue(partial, metric) {\n        const pts = partial.split('/');\n        for (const pt of pts) {\n            let pts = pt.split(':');\n            if (pts[0] == metric) {\n                return pts[1];\n            }\n        }\n    }\n    static roundup(score) {\n        return +(score * 10).toFixed() / 10;\n    }\n    /**\n     * Give the corresponding rating of the provided score.\n     *\n     * @param score The score to rate.\n     * @return The rating.\n     * @throws When the score is out of bounds.\n     */\n    static Rating(score) {\n        if (score < 0 || score > 10) {\n            throw new Error('score out of bounds');\n        }\n        if (score >= 9.0) {\n            return 'CRITICAL';\n        }\n        if (score >= 7.0) {\n            return 'HIGH';\n        }\n        if (score >= 4.0) {\n            return 'MEDIUM';\n        }\n        if (score >= 0.1) {\n            return 'LOW';\n        }\n        return 'NONE';\n    }\n}\n;\n// Metrics defined in Table 23.\nconst table23 = {\n    // Base (11 metrics)\n    'AV': ['N', 'A', 'L', 'P'],\n    'AC': ['L', 'H'],\n    'AT': ['N', 'P'],\n    'PR': ['N', 'L', 'H'],\n    'UI': ['N', 'P', 'A'],\n    'VC': ['H', 'L', 'N'],\n    'VI': ['H', 'L', 'N'],\n    'VA': ['H', 'L', 'N'],\n    'SC': ['H', 'L', 'N'],\n    'SI': ['H', 'L', 'N'],\n    'SA': ['H', 'L', 'N'],\n    // Threat (1 metric)\n    'E': ['X', 'A', 'P', 'U'],\n    // Environmental (14 metrics)\n    'CR': ['X', 'H', 'M', 'L'],\n    'IR': ['X', 'H', 'M', 'L'],\n    'AR': ['X', 'H', 'M', 'L'],\n    'MAV': ['X', 'N', 'A', 'L', 'P'],\n    'MAC': ['X', 'L', 'H'],\n    'MAT': ['X', 'N', 'P'],\n    'MPR': ['X', 'N', 'L', 'H'],\n    'MUI': ['X', 'N', 'P', 'A'],\n    'MVC': ['X', 'H', 'L', 'N'],\n    'MVI': ['X', 'H', 'L', 'N'],\n    'MVA': ['X', 'H', 'L', 'N'],\n    'MSC': ['X', 'H', 'L', 'N'],\n    'MSI': ['X', 'S', 'H', 'L', 'N'],\n    'MSA': ['X', 'S', 'H', 'L', 'N'],\n    // Supplemental (6 metrics)\n    'S': ['X', 'N', 'P'],\n    'AU': ['X', 'N', 'Y'],\n    'R': ['X', 'A', 'U', 'I'],\n    'V': ['X', 'D', 'C'],\n    'RE': ['X', 'L', 'M', 'H'],\n    'U': ['X', 'Clear', 'Green', 'Amber', 'Red'],\n};\nconst highestSeverityVectors = {\n    // EQ1 - Table 24\n    1: {\n        0: ['AV:N/PR:N/UI:N'],\n        1: ['AV:A/PR:N/UI:N', 'AV:N/PR:L/UI:N', 'AV:N/PR:N/UI:P'],\n        2: ['AV:P/PR:N/UI:N', 'AV:A/PR:L/UI:P'],\n    },\n    // EQ2 - Table 25\n    2: {\n        0: ['AC:L/AT:N'],\n        1: ['AC:H/AT:N', 'AC:L/AT:P'],\n    },\n    // EQ3-EQ6 - Table 30\n    3: {\n        0: {\n            0: ['VC:H/VI:H/VA:H/CR:H/IR:H/AR:H'],\n            1: ['VC:H/VI:H/VA:L/CR:M/IR:M/AR:H', 'VC:H/VI:H/VA:H/CR:M/IR:M/AR:M'],\n        },\n        1: {\n            0: ['VC:L/VI:H/VA:H/CR:H/IR:H/AR:H', 'VC:H/VI:L/VA:H/CR:H/IR:H/AR:H'],\n            1: ['VC:L/VI:H/VA:L/CR:H/IR:M/AR:H', 'VC:L/VI:H/VA:H/CR:H/IR:M/AR:M', 'VC:H/VI:L/VA:H/CR:M/IR:H/AR:M', 'VC:H/VI:L/VA:L/CR:M/IR:H/AR:H', 'VC:L/VI:L/VA:H/CR:H/IR:H/AR:M'],\n        },\n        2: {\n            1: ['VC:L/VI:L/VA:L/CR:H/IR:H/AR:H']\n        },\n    },\n    // EQ4 - Table 27\n    4: {\n        0: ['SC:H/SI:S/SA:S'],\n        1: ['SC:H/SI:H/SA:H'],\n        2: ['SC:L/SI:L/SA:L'],\n    },\n    // EQ5 - Table 28 (useless in fact, is not involved in score computation due to only 1 dimension)\n    5: {\n        0: ['E:A'],\n        1: ['E:P'],\n        2: ['E:U'],\n    },\n};\nconst sevIdx = {\n    // Base metrics\n    'AV': ['N', 'A', 'L', 'P'],\n    'AC': ['L', 'H'],\n    'AT': ['N', 'P'],\n    'PR': ['N', 'L', 'H'],\n    'UI': ['N', 'P', 'A'],\n    'VC': ['H', 'L', 'N'],\n    'VI': ['H', 'L', 'N'],\n    'VA': ['H', 'L', 'N'],\n    'SC': ['H', 'L', 'N'],\n    'SI': ['S', 'H', 'L', 'N'],\n    'SA': ['S', 'H', 'L', 'N'],\n    // Threat metrics\n    'E': ['A', 'P', 'U'],\n    // Environmental metrics\n    'CR': ['H', 'M', 'L'],\n    'IR': ['H', 'M', 'L'],\n    'AR': ['H', 'M', 'L'],\n};\n// Depths are re-computed and has been checked in github.com/pandatix/go-cvss\nconst depth = {\n    // EQ1\n    1: {\n        0: 0,\n        1: 3,\n        2: 4,\n    },\n    // EQ2\n    2: {\n        0: 0,\n        1: 1,\n    },\n    // EQ3-EQ6\n    3: {\n        0: {\n            0: 6,\n            1: 5,\n        },\n        1: {\n            0: 7,\n            1: 7,\n        },\n        2: {\n            1: 9,\n        },\n    },\n    // EQ4\n    4: {\n        0: 5,\n        1: 4,\n        2: 3,\n    },\n    // EQ5\n    5: {\n        0: 1,\n        1: 1,\n        2: 1,\n    },\n};\n// MacroVectors maximum score given each EQuivalency sets.\nconst mvs = {\n    '000000': 10,\n    '000001': 9.9,\n    '000010': 9.8,\n    '000011': 9.5,\n    '000020': 9.5,\n    '000021': 9.2,\n    '000100': 10,\n    '000101': 9.6,\n    '000110': 9.3,\n    '000111': 8.7,\n    '000120': 9.1,\n    '000121': 8.1,\n    '000200': 9.3,\n    '000201': 9,\n    '000210': 8.9,\n    '000211': 8,\n    '000220': 8.1,\n    '000221': 6.8,\n    '001000': 9.8,\n    '001001': 9.5,\n    '001010': 9.5,\n    '001011': 9.2,\n    '001020': 9,\n    '001021': 8.4,\n    '001100': 9.3,\n    '001101': 9.2,\n    '001110': 8.9,\n    '001111': 8.1,\n    '001120': 8.1,\n    '001121': 6.5,\n    '001200': 8.8,\n    '001201': 8,\n    '001210': 7.8,\n    '001211': 7,\n    '001220': 6.9,\n    '001221': 4.8,\n    '002001': 9.2,\n    '002011': 8.2,\n    '002021': 7.2,\n    '002101': 7.9,\n    '002111': 6.9,\n    '002121': 5,\n    '002201': 6.9,\n    '002211': 5.5,\n    '002221': 2.7,\n    '010000': 9.9,\n    '010001': 9.7,\n    '010010': 9.5,\n    '010011': 9.2,\n    '010020': 9.2,\n    '010021': 8.5,\n    '010100': 9.5,\n    '010101': 9.1,\n    '010110': 9,\n    '010111': 8.3,\n    '010120': 8.4,\n    '010121': 7.1,\n    '010200': 9.2,\n    '010201': 8.1,\n    '010210': 8.2,\n    '010211': 7.1,\n    '010220': 7.2,\n    '010221': 5.3,\n    '011000': 9.5,\n    '011001': 9.3,\n    '011010': 9.2,\n    '011011': 8.5,\n    '011020': 8.5,\n    '011021': 7.3,\n    '011100': 9.2,\n    '011101': 8.2,\n    '011110': 8,\n    '011111': 7.2,\n    '011120': 7,\n    '011121': 5.9,\n    '011200': 8.4,\n    '011201': 7,\n    '011210': 7.1,\n    '011211': 5.2,\n    '011220': 5,\n    '011221': 3,\n    '012001': 8.6,\n    '012011': 7.5,\n    '012021': 5.2,\n    '012101': 7.1,\n    '012111': 5.2,\n    '012121': 2.9,\n    '012201': 6.3,\n    '012211': 2.9,\n    '012221': 1.7,\n    '100000': 9.8,\n    '100001': 9.5,\n    '100010': 9.4,\n    '100011': 8.7,\n    '100020': 9.1,\n    '100021': 8.1,\n    '100100': 9.4,\n    '100101': 8.9,\n    '100110': 8.6,\n    '100111': 7.4,\n    '100120': 7.7,\n    '100121': 6.4,\n    '100200': 8.7,\n    '100201': 7.5,\n    '100210': 7.4,\n    '100211': 6.3,\n    '100220': 6.3,\n    '100221': 4.9,\n    '101000': 9.4,\n    '101001': 8.9,\n    '101010': 8.8,\n    '101011': 7.7,\n    '101020': 7.6,\n    '101021': 6.7,\n    '101100': 8.6,\n    '101101': 7.6,\n    '101110': 7.4,\n    '101111': 5.8,\n    '101120': 5.9,\n    '101121': 5,\n    '101200': 7.2,\n    '101201': 5.7,\n    '101210': 5.7,\n    '101211': 5.2,\n    '101220': 5.2,\n    '101221': 2.5,\n    '102001': 8.3,\n    '102011': 7,\n    '102021': 5.4,\n    '102101': 6.5,\n    '102111': 5.8,\n    '102121': 2.6,\n    '102201': 5.3,\n    '102211': 2.1,\n    '102221': 1.3,\n    '110000': 9.5,\n    '110001': 9,\n    '110010': 8.8,\n    '110011': 7.6,\n    '110020': 7.6,\n    '110021': 7,\n    '110100': 9,\n    '110101': 7.7,\n    '110110': 7.5,\n    '110111': 6.2,\n    '110120': 6.1,\n    '110121': 5.3,\n    '110200': 7.7,\n    '110201': 6.6,\n    '110210': 6.8,\n    '110211': 5.9,\n    '110220': 5.2,\n    '110221': 3,\n    '111000': 8.9,\n    '111001': 7.8,\n    '111010': 7.6,\n    '111011': 6.7,\n    '111020': 6.2,\n    '111021': 5.8,\n    '111100': 7.4,\n    '111101': 5.9,\n    '111110': 5.7,\n    '111111': 5.7,\n    '111120': 4.7,\n    '111121': 2.3,\n    '111200': 6.1,\n    '111201': 5.2,\n    '111210': 5.7,\n    '111211': 2.9,\n    '111220': 2.4,\n    '111221': 1.6,\n    '112001': 7.1,\n    '112011': 5.9,\n    '112021': 3,\n    '112101': 5.8,\n    '112111': 2.6,\n    '112121': 1.5,\n    '112201': 2.3,\n    '112211': 1.3,\n    '112221': 0.6,\n    '200000': 9.3,\n    '200001': 8.7,\n    '200010': 8.6,\n    '200011': 7.2,\n    '200020': 7.5,\n    '200021': 5.8,\n    '200100': 8.6,\n    '200101': 7.4,\n    '200110': 7.4,\n    '200111': 6.1,\n    '200120': 5.6,\n    '200121': 3.4,\n    '200200': 7,\n    '200201': 5.4,\n    '200210': 5.2,\n    '200211': 4,\n    '200220': 4,\n    '200221': 2.2,\n    '201000': 8.5,\n    '201001': 7.5,\n    '201010': 7.4,\n    '201011': 5.5,\n    '201020': 6.2,\n    '201021': 5.1,\n    '201100': 7.2,\n    '201101': 5.7,\n    '201110': 5.5,\n    '201111': 4.1,\n    '201120': 4.6,\n    '201121': 1.9,\n    '201200': 5.3,\n    '201201': 3.6,\n    '201210': 3.4,\n    '201211': 1.9,\n    '201220': 1.9,\n    '201221': 0.8,\n    '202001': 6.4,\n    '202011': 5.1,\n    '202021': 2,\n    '202101': 4.7,\n    '202111': 2.1,\n    '202121': 1.1,\n    '202201': 2.4,\n    '202211': 0.9,\n    '202221': 0.4,\n    '210000': 8.8,\n    '210001': 7.5,\n    '210010': 7.3,\n    '210011': 5.3,\n    '210020': 6,\n    '210021': 5,\n    '210100': 7.3,\n    '210101': 5.5,\n    '210110': 5.9,\n    '210111': 4,\n    '210120': 4.1,\n    '210121': 2,\n    '210200': 5.4,\n    '210201': 4.3,\n    '210210': 4.5,\n    '210211': 2.2,\n    '210220': 2,\n    '210221': 1.1,\n    '211000': 7.5,\n    '211001': 5.5,\n    '211010': 5.8,\n    '211011': 4.5,\n    '211020': 4,\n    '211021': 2.1,\n    '211100': 6.1,\n    '211101': 5.1,\n    '211110': 4.8,\n    '211111': 1.8,\n    '211120': 2,\n    '211121': 0.9,\n    '211200': 4.6,\n    '211201': 1.8,\n    '211210': 1.7,\n    '211211': 0.7,\n    '211220': 0.8,\n    '211221': 0.2,\n    '212001': 5.3,\n    '212011': 2.4,\n    '212021': 1.4,\n    '212101': 2.4,\n    '212111': 1.2,\n    '212121': 0.5,\n    '212201': 1,\n    '212211': 0.3,\n    '212221': 0.1,\n};\n"],
  "mappings": "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AAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AACd;",
  "names": ["metrics", "scores", "metrics", "metricValues", "scores", "re", "msd", "v", "pts"]
}
